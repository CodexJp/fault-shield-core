# This workflow will build a Java project with Maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "Define the release version"
        required: true
        default: ""
      developmentVersion:
        description: "Define the snapshot version"
        required: true
        default: ""

jobs:
  # Prepare y publish maven artifact into Maven Central
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Maven Central Repository
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        java-package: 'jdk'
        cache: 'maven'
        server-id: ossrh
    - name: Extract Release Version
      id: extract
      uses: andreacomo/maven-gav-extractor@v2
    - name: Log GAV
      run: |
        echo ${{ steps.extract.outputs.group-id }}
        echo ${{ steps.extract.outputs.artifact-id }}
        echo ${{ steps.extract.outputs.version }}
        echo ${{ steps.extract.outputs.name }}
        export RELEASE_VERSION=$(echo "${{ steps.extract.outputs.version }}" | sed 's/-SNAPSHOT//')
        echo "release_version=${RELEASE_VERSION}" >> $GITHUB_ENV
        export TAG_NAME="${artifact_name}-${RELEASE_VERSION}"
        export RELEASE_NAME="${artifact_name} ${RELEASE_VERSION}"
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
      shell: bash
    - name: Debug Release Info
      run: |
        echo "Artifact Name: ${{ env.artifact_name }}"
        echo "Release Version: ${{ env.release_version }}"
        echo "Auto Release Flag: ${{ env.auto_release }}"
    - name: Configure Git User
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: Import GPG Key
      uses: crazy-max/ghaction-import-gpg@v5.0.0
      with:
        gpg_private_key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
    - name: Verify Whether a Release is Ready
      id: release
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/master" ]; then
          # Si es un push a la rama master, establecer auto_release en true
          echo "auto_release=true" >> $GITHUB_ENV
        else
          # En otros casos, establecer auto_release en false
          echo "auto_release=false" >> $GITHUB_ENV
        fi
        echo "auto_release: ${{ env.auto_release }}"
    - name: Release With Maven
      run: |
        if [ "${{ env.auto_release }}" = "true" ]; then
          mvn -B -U \
            -Pci-cd \
            release:prepare \
            release:perform \
            javadoc:jar \
            source:jar \
            -s /home/runner/work/fault-shield-core/fault-shield-core/settings.xml \
            -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }} \
            -DreleaseVersion=${{ github.event.inputs.releaseVersion }} \
            -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }} \
            deploy
        else
          echo "Auto release is not enabled. Skipping release steps."
        fi
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        AUTO_RELEASE_AFTER_CLOSE: ${{ env.auto_release }}
    - name: Artifact Name
      shell: bash
      run: |
        echo "artifact_name=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> "$GITHUB_ENV"
    - name: Define Jar Name
      shell: bash
      run: |
        echo "{{ env.artifact_name }}"
        ls -al ./target/
        mv ./target/*.*:${{ env.artifact_name }}.jar ./target/${{ env.artifact_name }}.jar
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.artifact_name }}-${{ env.sha_short }}
        path: ./target/${{ env.artifact_name }}.jar
    - name: Workflow Release Notes
      uses: peter-evans/repository-dispatch@v2
      if: ${{ github.event.inputs.releaseVersion }} != "" && ${{ github.event.inputs.developmentVersion }} != ""
      with:
        event-type: release-notes
        client-payload: '{"auto_release": "${{ env.auto_release }}", "artifact": "${{ env.artifact_name }}-${{ env.sha_short }}"}'
    # Release
    - name: Generate Changelog
      id: changelog
      uses: metcalfc/changelog-generator@v0.4.4
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.release_version }}
        release_name: Release ${{ env.artifact_name }} ${{ env.release_version }}
        body: |
          Grab the new version from Maven central https://central.sonatype.com/artifact/io.github.codexjp/fault-shield-core/${{ env.release_version }}/ by using it in your deps

          ```
          <dependencies>
              <dependency>
                  <groupId>io.github.codexjp</groupId>
                  <artifactId>fault-shield-core</artifactId>
                  <version>${{ env.release_version }}</version>
              </dependency>
          </dependencies>
          ```

          ### Things that changed in this release
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false